name: CI
on:
  push:
    branches: [ main, master, develop, "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test:
    name: Lint, Type, Test (CPU)
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Install system deps (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y graphviz
      - name: Upgrade pip
        run: python -m pip install -U pip wheel
      - name: Install project (dev extras)
        run: python -m pip install -e ".[dev]"
      - name: Pre-commit (if configured)
        run: |
          python -m pip install pre-commit
          if [ -f .pre-commit-config.yaml ]; then pre-commit run --all-files; else echo "No pre-commit config; skipping"; fi
      - name: Type check (if sources exist)
        run: |
          PKG_DIRS="dch_core dch_pipeline dch_data dch_snn baselines"
          ANY=0
          for d in $PKG_DIRS; do [ -d "$d" ] && ANY=1; done
          if [ "$ANY" -eq 1 ]; then mypy $PKG_DIRS; else echo "No source dirs; skipping mypy"; fi
      - name: Run tests (if present)
        run: |
          if [ -d tests ]; then pytest -q; else echo "No tests dir; skipping pytest"; fi
      - name: Upload coverage (if produced)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            .coverage
            .coverage.*
            coverage.xml
          if-no-files-found: ignore

  # cuda-test:
  #   name: CUDA Tests (scheduled/self-hosted)
  #   if: github.event_name == 'schedule'
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"
  #     - name: Install CUDA build
  #       run: |
  #         python -m pip install -U pip wheel
  #         python -m pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121
  #         python -m pip install -e ".[dev]"
  #     - name: GPU smoke
  #       run: python -c "import torch; assert torch.cuda.is_available(); print(torch.cuda.get_device_name(0))"
  #     - name: Tests
  #       run: pytest -q -k "gpu or cuda or integration"